import collections


class ConfigRenderOptions(collections.namedtuple('ConfigRenderOptions',
        ('origin_comments', 'comments', 'formatted', 'json'))):
    """
     * <p>
     * A set of options related to rendering a {@link ConfigValue}. Passed to
     * {@link ConfigValue#render(ConfigRenderOptions)}.
     *
     * <p>
     * Here is an example of creating a {@code ConfigRenderOptions}:
     *
     * <pre>
     *     ConfigRenderOptions options =
     *         ConfigRenderOptions.defaults().setComments(false)
     * </pre>

     :param origin_comments: boolean
         If this is enabled, the library generates comments for each setting
         based on the {@link ConfigValue#origin} of that setting's value. For
         example these comments might tell you which file a setting comes from.
         This controls only these autogenerated "origin of this setting"
         comments, to toggle regular comments use ``comments``.

     :param comments: boolean
         whether the options enable comments. True if comments should be rendered.
         This controls human-written comments but not the autogenerated "origin
         of this setting" comments, which are controlled by ``origin_comments``.

     :param formatted: boolean
         Formatting means indentation and whitespace, enabling formatting makes
         things prettier but larger.

     :param json: boolean
         JSON means that HOCON extensions (omitting commas, quotes for example)
         won't be used. However, whether to use comments is controlled by the
         separate {@link #setComments(boolean)} and
         {@link #setOriginComments(boolean)} options. So if you enable
         comments you will get invalid JSON despite setting this to true.
    """

    @classmethod
    def defaults(cls):
        """
         * Returns the default render options which are verbose (commented and
         * formatted). See {@link ConfigRenderOptions#concise} for stripped-down
         * options. This rendering will not be valid JSON since it has comments.
         *
         * @return the default render options
        """
        return ConfigRenderOptions(true, true, true, true)

    @classmethod
    def concise(cls):
        """
         * Returns concise render options (no whitespace or comments). For a
         * resolved {@link Config}, the concise rendering will be valid JSON.
         *
         * @return the concise render options
        """
        return ConfigRenderOptions(false, false, false, true)

    def set_comments(self, value):
        """
         * Returns options with comments toggled.
         *
         * @param value
         *            true to include comments in the render
         * @return options with requested setting for comments
        """
        return self._replace(comments=value)

    def set_origin_comments(self, value):
        """
         * Returns options with origin comments toggled.
         *
         * @param value
         *            true to include autogenerated setting-origin
                      comments in the render
         * @return options with origin comments toggled
         """
        return self._replace(origin_comments=value)

    def set_formatted(self, value):
        """
         * Returns options with formatting toggled.
         *
         * @param value
         *            true to include comments in the render
         * @return options with requested setting for formatting
        """
        return self._replace(formatted=value)

    def set_json(self, value):
        """
         * Returns options with JSON toggled. JSON means that HOCON extensions
         * (omitting commas, quotes for example) won't be used. However, whether to
         * use comments is controlled by the separate {@link #setComments(boolean)}
         * and {@link #setOriginComments(boolean)} options. So if you enable
         * comments you will get invalid JSON despite setting this to true.
         *
         * @param value
         *            true to include non-JSON extensions in the render
         * @return options with requested setting for JSON
        """
        return self._replace(json=value)
